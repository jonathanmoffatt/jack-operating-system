// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int KEYBOARD, MAX_LENGTH;
    static char CHAR_NEWLINE, CHAR_BACKSPACE, CHAR_CURSOR, CHAR_SPACE, CHAR_HYPHEN, CHAR_ZERO, CHAR_NINE;


    /** Initializes the keyboard. */
    function void init() {
        let KEYBOARD = 24576;
        let MAX_LENGTH = 200;

        let CHAR_CURSOR = 0;
        let CHAR_SPACE = 32;
        let CHAR_HYPHEN = 45;
        let CHAR_ZERO = 48;
        let CHAR_NINE = 57;
        let CHAR_NEWLINE = 128;
        let CHAR_BACKSPACE = 129;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(KEYBOARD);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key;

        do Output.printChar(CHAR_CURSOR);
        while (Keyboard.keyPressed() = 0) {}
        let key = Keyboard.keyPressed();
        if (key < CHAR_NEWLINE) {
            do Output.backSpace();
            do Output.printChar(key);
        } else {
            do Output.backSpace();
        }
        while (~(Keyboard.keyPressed() = 0)) {}
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char c;
        var String result;
        var boolean finished;

        do Output.printString(message);
        let result = String.new(MAX_LENGTH);
        let finished = false;
        while (~finished) {
            let c = Keyboard.readChar();
            if (c = CHAR_NEWLINE) {
                let finished = true;
            } else {
                if ((c = CHAR_BACKSPACE) & (result.length() > 0)) {
                    do result.eraseLastChar();
                    do Output.backSpace();
                } else {
                    if (c < CHAR_NEWLINE) {
                        do result.appendChar(c);
                    }
                }
            }
        }
        return result;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String input;
        var int result, i;
        var char c;
        var boolean negative;

        let input = Keyboard.readLine(message);
        let result = 0;
        let i = 0;
        let negative = false;
        while (i < input.length()) {
            let c = input.charAt(i);
            if ((i = 0) & (c = CHAR_HYPHEN)) {
                let negative = true;
            } else {
                if (Keyboard.isDigit(c)) {
                    let result = (result * 10) + Keyboard.digitToInt(c);
                } else {
                    let i = input.length() - 1;
                }
            }
            let i = i + 1;
        }
        if (negative) {
            let result = -result;
        }
        return result;
    }

    function boolean isDigit(char c) {
        return (~(c < CHAR_ZERO)) & (~(c > CHAR_NINE));
    }

    function int digitToInt(char c) {
        return c - CHAR_ZERO;
    }
}
