// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE;
    static boolean color;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        var int bit, power;

        let SCREEN_BASE  = 16384;
        let color = true;
        let bits = Array.new(16);
        let bit = 0;
        let power = 1;
        while (bit < 16) {
            let bits[bit] = power;
            let bit = bit + 1;
            let power = power * 2;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address, end;
        
        let address = SCREEN_BASE;
        let end = SCREEN_BASE + (256 * 32);
        while (address < end) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, word, modulus;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(2);
        }
        
        let word = x / 16;
        let modulus = x - (word * 16);
        let address = (32 * y) + word;
        let value = Memory.peek(address + SCREEN_BASE);
        if (color) {
            let value = value | bits[modulus];
        } else {
            let value = value & (~bits[modulus]);
        }
        do Memory.poke(address + SCREEN_BASE, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, temp;
        var boolean up;

        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if (x1 > x2) {
            // swap so we are always drawing from left to right
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let up = dy < 0;
        let dy = Math.abs(dy);
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((~(a > dx) & (~(b > dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                // move vertically
                let a = a + 1;
                let diff = diff + dy;
            } else {
                // move horizontally
                if (up) { let b = b - 1; } else { let b = b + 1; }
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x, temp;

        if (x2 < x1) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        let x = x1;
        while (~(x > x2)) {
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int y, temp;

        if (y2 < y1) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int minX, maxX, minY, maxY, y;

        let minX = Math.min(x1, x2);
        let maxX = Math.max(x1, x2);
        let minY = Math.min(y1, y2);
        let maxY = Math.max(y1, y2);
        let y = minY;
        while (~(y > maxY)) {
            do Screen.drawHorizontalLine(minX, maxY, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
