// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, bit;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        // bit represents the i'th bit
        let bit = 1;
        while (i < 16) {
            if ((y & bit) = bit) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let bit = bit + bit;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean negate;
        var int q, result;
        let negate = false;
        if (x < 0) {
            let x = -x;
            let negate = ~negate;
        }
        if (y < 0) {
            let y = -y;
            let negate = ~negate;
        }
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        let result = q + q;
        if (~((x - (2 * q * y)) < y)) {
            let result = result + 1;
        }
        if (negate) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    /*
    Example: sqrt(64)
        y   j   pwr
        0   7   128
        0   6   64
        0   5   32
        0   4   16
        0   3   8   => y = 0 + 8
        0   2   4   => no change

    Example: sqrt(100)
        y   j    pwr
        0   7   128
        ...
        0   3   8   => y = 8
        8   2   4   => (8+4)^2 not <= 100
        8   1   2   => (8+2)^2 == 100, so y = 8+2 = 10
        8   0   1   => (10+1)^2 not <= 100 so y = 10

    Example: sqrt(32767)=181
        y   pwr square
        0   128 16384   => y=128
        128 64  (128+64)^2=36864    => no change
        128 32  (128+32)^2=25600    => y = 128+32
        160 16  (160+16)^2=30976    => y = 160+16
        176 8   (176+8)^2=33856     => no change
        176 4   (176+4)^2=32400     => y = 176+4
        180 2   (180+2)^2=33124     => no change
        180 1   (180+1)^2=32761     => y = 180+1 = 181
    */
    function int sqrt(int x) {
        var int result, pwr, square;
        let result = 0;
        let pwr = 256; // 2^8
        while (pwr > 1) {
            let pwr = pwr / 2;
            let square = (result + pwr) * (result + pwr);
            if ((x > (square - 1)) & (square > 0)) {
                let result = result + pwr;
            }
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
