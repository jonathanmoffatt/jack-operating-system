// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let length = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max) {
            let str[length] = c;
            let length = length + 1;
        } else {
            do Sys.error(10);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let str[length] = 0;
        } else {
            do Sys.error(10);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i;
        var char c;
        var boolean negative;

        let result = 0;
        let i = 0;
        let negative = false;
        while (i < length) {
            let c = charAt(i);
            if ((i = 0) & (c = String.hyphen())) { 
                let negative = true;
            } else {
                if (String.isDigit(c)) {
                    let result = (result * 10) + String.digitToInt(c);
                } else {
                    let i = length - 1;
                }
            }
            let i = i + 1;
        }
        if (negative) {
            let result = -result;
        }
        return result;
    }

    function boolean isDigit(char c) {
        return (~(c < String.zero())) & (~(c > String.nine()));
    }

    function int digitToInt(char c) {
        return c - String.zero();
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String s;
        var int i;

        let s = String.convertIntToString(val);

        // copy the string into this one
        let length = s.length();
        let i = 0;
        while (i < length) {
            do setCharAt(i, s.charAt(i));
            let i = i + 1;
        }
        do s.dispose();
        return;
    }

    function String convertIntToString(int value) {
        var int lastDigit;
        var int c, abs;
        var String s;

        let abs = Math.abs(value);
        let lastDigit = String.mod10(abs);
        let c = lastDigit + String.zero();
        if (abs < 10) {
            let s = String.new(6); // -32767 will be the longest string
            if (value < 0) {
                do s.appendChar(String.hyphen());
            }
            return s.appendChar(c);
        } else {
            let s = String.convertIntToString(value / 10);
            return s.appendChar(c);
        }
    }

    function int mod10(int value) {
        var int div;

        let div = value / 10;
        return value - (div * 10);
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int zero() {
        return 48;
    }

    function int nine() {
        return 57;
    }

    function int hyphen() {
        return 45;
    }
}
